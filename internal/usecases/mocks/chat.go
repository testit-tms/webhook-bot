// Code generated by MockGen. DO NOT EDIT.
// Source: chat.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/testit-tms/webhook-bot/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockchatsStorage is a mock of chatsStorage interface.
type MockchatsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockchatsStorageMockRecorder
}

// MockchatsStorageMockRecorder is the mock recorder for MockchatsStorage.
type MockchatsStorageMockRecorder struct {
	mock *MockchatsStorage
}

// NewMockchatsStorage creates a new mock instance.
func NewMockchatsStorage(ctrl *gomock.Controller) *MockchatsStorage {
	mock := &MockchatsStorage{ctrl: ctrl}
	mock.recorder = &MockchatsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockchatsStorage) EXPECT() *MockchatsStorageMockRecorder {
	return m.recorder
}

// AddChat mocks base method.
func (m *MockchatsStorage) AddChat(ctx context.Context, chat entities.Chat) (entities.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChat", ctx, chat)
	ret0, _ := ret[0].(entities.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddChat indicates an expected call of AddChat.
func (mr *MockchatsStorageMockRecorder) AddChat(ctx, chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChat", reflect.TypeOf((*MockchatsStorage)(nil).AddChat), ctx, chat)
}
