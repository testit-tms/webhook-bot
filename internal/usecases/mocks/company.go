// Code generated by MockGen. DO NOT EDIT.
// Source: company.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/testit-tms/webhook-bot/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockcompanyStorage is a mock of companyStorage interface.
type MockcompanyStorage struct {
	ctrl     *gomock.Controller
	recorder *MockcompanyStorageMockRecorder
}

// MockcompanyStorageMockRecorder is the mock recorder for MockcompanyStorage.
type MockcompanyStorageMockRecorder struct {
	mock *MockcompanyStorage
}

// NewMockcompanyStorage creates a new mock instance.
func NewMockcompanyStorage(ctrl *gomock.Controller) *MockcompanyStorage {
	mock := &MockcompanyStorage{ctrl: ctrl}
	mock.recorder = &MockcompanyStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcompanyStorage) EXPECT() *MockcompanyStorageMockRecorder {
	return m.recorder
}

// GetCompanyByOwnerTelegramId mocks base method.
func (m *MockcompanyStorage) GetCompanyByOwnerTelegramId(ctx context.Context, ownerId int64) (entities.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByOwnerTelegramId", ctx, ownerId)
	ret0, _ := ret[0].(entities.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByOwnerTelegramId indicates an expected call of GetCompanyByOwnerTelegramId.
func (mr *MockcompanyStorageMockRecorder) GetCompanyByOwnerTelegramId(ctx, ownerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByOwnerTelegramId", reflect.TypeOf((*MockcompanyStorage)(nil).GetCompanyByOwnerTelegramId), ctx, ownerId)
}
