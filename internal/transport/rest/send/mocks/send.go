// Code generated by MockGen. DO NOT EDIT.
// Source: send.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/testit-tms/webhook-bot/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// Mocksender is a mock of sender interface.
type Mocksender struct {
	ctrl     *gomock.Controller
	recorder *MocksenderMockRecorder
}

// MocksenderMockRecorder is the mock recorder for Mocksender.
type MocksenderMockRecorder struct {
	mock *Mocksender
}

// NewMocksender creates a new mock instance.
func NewMocksender(ctrl *gomock.Controller) *Mocksender {
	mock := &Mocksender{ctrl: ctrl}
	mock.recorder = &MocksenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocksender) EXPECT() *MocksenderMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *Mocksender) SendMessage(ctx context.Context, msg entities.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MocksenderMockRecorder) SendMessage(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*Mocksender)(nil).SendMessage), ctx, msg)
}
